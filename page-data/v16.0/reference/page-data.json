{"componentChunkName":"component---src-page-templates-content-page-jsx","path":"/v16.0/reference","result":{"data":{"site":{"pathPrefix":"/eosjs"},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/v15.0/reference"}},{"fields":{"slug":"/latest/installation"}},{"fields":{"slug":"/latest/index"}},{"fields":{"slug":"/v16.0/format"}},{"fields":{"slug":"/latest/technical-overview"}},{"fields":{"slug":"/v16.0/prior_versions"}},{"fields":{"slug":"/v16.0/README"}},{"fields":{"slug":"/v16.0/reference"}},{"fields":{"slug":"/v15.0/format"}},{"fields":{"slug":"/v15.0/README"}},{"fields":{"slug":"/v16.0/index"}},{"fields":{"slug":"/v15.0/index"}},{"fields":{"slug":"/v15.0/prior_versions"}},{"fields":{"slug":"/latest/basic-usage/browser"}},{"fields":{"slug":"/latest/basic-usage/commonjs"}},{"fields":{"slug":"/latest/README"}},{"fields":{"slug":"/latest/basic-usage/es-modules"}},{"fields":{"slug":"/latest/basic-usage/index"}},{"fields":{"slug":"/latest/classes/_publickey_.publickey"}},{"fields":{"slug":"/latest/classes/_privatekey_.privatekey"}},{"fields":{"slug":"/latest/enums/numeric.keytype"}},{"fields":{"slug":"/latest/classes/api.api-1"}},{"fields":{"slug":"/latest/classes/_signature_.signature"}},{"fields":{"slug":"/latest/classes/json_rpc.jsonrpc"}},{"fields":{"slug":"/latest/classes/js_sig.jssignatureprovider"}},{"fields":{"slug":"/latest/classes/rpc_error.rpcerror"}},{"fields":{"slug":"/latest/classes/serialize.serializerstate"}},{"fields":{"slug":"/latest/classes/serialize.serialbuffer"}},{"fields":{"slug":"/latest/classes/webauthn_sig.webauthnsignatureprovider"}},{"fields":{"slug":"/latest/how-to-guides/how-to-approve-a-multisig-transaction"}},{"fields":{"slug":"/latest/faq/example-signature-providers"}},{"fields":{"slug":"/latest/how-to-guides/how-to-cancel-a-multisig-transaction"}},{"fields":{"slug":"/latest/faq/what-is-a-signature-provider"}},{"fields":{"slug":"/latest/how-to-guides/how-to-create-an-account"}},{"fields":{"slug":"/latest/how-to-guides/how-to-delete-permissions"}},{"fields":{"slug":"/latest/how-to-guides/how-to-create-permissions"}},{"fields":{"slug":"/latest/how-to-guides/how-to-deploy-a-smart-contract"}},{"fields":{"slug":"/latest/how-to-guides/how-to-execute-a-multisig-transaction"}},{"fields":{"slug":"/latest/how-to-guides/how-to-get-block-information"}},{"fields":{"slug":"/latest/how-to-guides/how-to-get-account-information"}},{"fields":{"slug":"/latest/how-to-guides/how-to-get-table-information"}},{"fields":{"slug":"/latest/how-to-guides/how-to-get-transaction-information"}},{"fields":{"slug":"/latest/how-to-guides/how-to-link-permissions"}},{"fields":{"slug":"/latest/how-to-guides/how-to-propose-a-multisig-transaction"}},{"fields":{"slug":"/latest/how-to-guides/how-to-set-the-network"}},{"fields":{"slug":"/latest/how-to-guides/how-to-stake"}},{"fields":{"slug":"/latest/how-to-guides/how-to-transfer-an-eosio-token"}},{"fields":{"slug":"/latest/how-to-guides/how-to-unlink-permissions"}},{"fields":{"slug":"/latest/how-to-guides/how-to-submit-a-transaction"}},{"fields":{"slug":"/latest/how-to-guides/how-to-unapprove-a-multisig-transaction"}},{"fields":{"slug":"/latest/how-to-guides/how-to-unstake"}},{"fields":{"slug":"/latest/interfaces/javascript_api.abiprovider"}},{"fields":{"slug":"/latest/how-to-guides/how-to-vote"}},{"fields":{"slug":"/latest/interfaces/javascript_api.authorityprovider"}},{"fields":{"slug":"/latest/interfaces/javascript_api.authorityproviderargs"}},{"fields":{"slug":"/latest/interfaces/javascript_api.binaryabi"}},{"fields":{"slug":"/latest/interfaces/javascript_api.signatureprovider"}},{"fields":{"slug":"/latest/interfaces/javascript_api.signatureproviderargs"}},{"fields":{"slug":"/latest/interfaces/javascript_api.cachedabi"}},{"fields":{"slug":"/latest/interfaces/numeric.key"}},{"fields":{"slug":"/latest/interfaces/rpc_api_methods.abi"}},{"fields":{"slug":"/latest/interfaces/rpc_api_methods.blockheaderstatetaposinfo"}},{"fields":{"slug":"/latest/interfaces/rpc_api_methods.blockheader"}},{"fields":{"slug":"/latest/interfaces/rpc_api_methods.blocktaposinfo"}},{"fields":{"slug":"/latest/interfaces/rpc_api_methods.getabiresult"}},{"fields":{"slug":"/latest/interfaces/rpc_api_methods.getblockheaderstateresult"}},{"fields":{"slug":"/latest/interfaces/rpc_api_methods.getcoderesult"}},{"fields":{"slug":"/latest/interfaces/rpc_api_methods.getinforesult"}},{"fields":{"slug":"/latest/interfaces/rpc_api_methods.getblockresult"}},{"fields":{"slug":"/latest/interfaces/rpc_api_methods.getrawcodeandabiresult"}},{"fields":{"slug":"/latest/interfaces/rpc_api_methods.pushtransactionargs"}},{"fields":{"slug":"/latest/interfaces/rpc_api_methods.signedblockheader"}},{"fields":{"slug":"/latest/interfaces/serialize.action"}},{"fields":{"slug":"/latest/interfaces/serialize.contract"}},{"fields":{"slug":"/latest/interfaces/serialize.authorization"}},{"fields":{"slug":"/latest/interfaces/serialize.createtypeargs"}},{"fields":{"slug":"/latest/interfaces/serialize.field"}},{"fields":{"slug":"/latest/interfaces/serialize.serializedaction"}},{"fields":{"slug":"/latest/interfaces/serialize.serializeroptions"}},{"fields":{"slug":"/latest/interfaces/serialize.type"}},{"fields":{"slug":"/latest/interfaces/serialize.symbol"}},{"fields":{"slug":"/latest/modules/_eosjs_key_conversions_"}},{"fields":{"slug":"/latest/modules/_privatekey_"}},{"fields":{"slug":"/latest/modules/_publickey_"}},{"fields":{"slug":"/latest/modules/_rpc_web_"}},{"fields":{"slug":"/latest/modules/_signature_"}},{"fields":{"slug":"/latest/modules/api"}},{"fields":{"slug":"/latest/modules/javascript_api"}},{"fields":{"slug":"/latest/modules/js_sig"}},{"fields":{"slug":"/latest/modules/json_rpc"}},{"fields":{"slug":"/latest/modules/numeric"}},{"fields":{"slug":"/latest/modules/rpc_error"}},{"fields":{"slug":"/latest/modules/rpc_api_methods"}},{"fields":{"slug":"/latest/modules/serialize"}},{"fields":{"slug":"/latest/modules/webauthn_sig"}},{"fields":{"slug":"/latest/troubleshooting/connectivity"}},{"fields":{"slug":"/latest/troubleshooting/missing-authorizations"}}]},"markdownRemark":{"html":"<h2 id=\"functions\">Functions</h2>\n<dl>\n<dt><a href=\"#encodeName\">encodeName(name, [littleEndian])</a> ⇒ <code>string.&lt;uint64&gt;</code></dt>\n<dd><p>Encode a name (a base32 string) to a number.</p>\n<p>  For performance reasons, the blockchain uses the numerical encoding of strings\n  for very common types like account names.</p>\n</dd>\n<dt><a href=\"#decodeName\">decodeName(value, [littleEndian])</a> ⇒ <code>string</code></dt>\n<dd></dd>\n<dt><a href=\"#DecimalString\">DecimalString()</a> ⇒ <code>string</code></dt>\n<dd><p>Normalize and validate decimal string (potentially large values).  Should\n  avoid internationalization issues if possible but will be safe and\n  throw an error for an invalid number.</p>\n<p>  Normalization removes extra zeros or decimal.</p>\n</dd>\n<dt><a href=\"#DecimalPad\">DecimalPad(num, [precision])</a> ⇒ <code>string</code></dt>\n<dd><p>Ensure a fixed number of decimal places.  Safe for large numbers.</p>\n</dd>\n<dt><a href=\"#DecimalImply\">DecimalImply()</a></dt>\n<dd><p>Ensures proper trailing zeros then removes decimal place.</p>\n</dd>\n<dt><a href=\"#DecimalUnimply\">DecimalUnimply(value, precision)</a> ⇒ <code>number</code></dt>\n<dd><p>Put the decimal place back in its position and return the normalized number\n  string (with any unnecessary zeros or an unnecessary decimal removed).</p>\n</dd>\n<dt><a href=\"#parseAsset\">parseAsset()</a> ⇒ <code>object</code></dt>\n<dd><p>Attempts to parse all forms of the asset strings (symbol, asset, or extended\n  versions).  If the provided string contains any additional or appears to have\n  invalid information an error is thrown.</p>\n</dd>\n<dt><del><a href=\"#Testnet\">Testnet()</a></del></dt>\n<dd></dd>\n<dt><del><a href=\"#Localnet\">Localnet()</a></del></dt>\n<dd></dd>\n<dt><a href=\"#safeConfig\">safeConfig()</a></dt>\n<dd><p>Set each property as read-only, read-write, no-access.  This is shallow\n  in that it applies only to the root object and does not limit access\n  to properties under a given object.</p>\n</dd>\n<dt><a href=\"#mergeWriteFunctions\">mergeWriteFunctions(EosApi)</a> ⇒ <code>object</code></dt>\n<dd><p>Merge in write functions (operations).  Tested against existing methods for\n  name conflicts.</p>\n</dd>\n<dt><a href=\"#defaultSignProvider\">defaultSignProvider()</a></dt>\n<dd><p>The default sign provider is designed to interact with the available public\n  keys (maybe just one), the transaction, and the blockchain to figure out\n  the minimum set of signing keys.</p>\n<p>  If only one key is available, the blockchain API calls are skipped and that\n  key is used to sign the transaction.</p>\n</dd>\n<dt><a href=\"#Name\">Name()</a></dt>\n<dd><p>Name eos::types native.hpp</p>\n</dd>\n<dt><a href=\"#variant\">variant(...variantArray)</a></dt>\n<dd><p>A variant is like having a version of an object.  A varint comes\n  first and identifies which type of object this is.</p>\n</dd>\n<dt><a href=\"#Symbol\">Symbol()</a></dt>\n<dd><p>Internal: precision, symbol\n  External: symbol</p>\n</dd>\n<dt><a href=\"#SymbolCode\">SymbolCode()</a></dt>\n<dd><p>Symbol type without the precision</p>\n</dd>\n<dt><a href=\"#ExtendedSymbol\">ExtendedSymbol()</a></dt>\n<dd><p>Internal: precision, symbol, contract\n  External: symbol, contract</p>\n</dd>\n<dt><a href=\"#Asset\">Asset()</a></dt>\n<dd><p>Internal: amount, precision, symbol, contract</p>\n</dd>\n<dt><a href=\"#ExtendedAsset\">ExtendedAsset()</a></dt>\n<dd></dd>\n<dt><a href=\"#authority.fromObject\">authority.fromObject()</a></dt>\n<dd><p>shorthand <code>EOS6MRyAj..</code></p>\n</dd>\n<dt><a href=\"#actionDataOverride\">actionDataOverride()</a></dt>\n<dd><p>Nested serialized structure.  Nested struct may be in HEX or object format.</p>\n</dd>\n<dt><a href=\"#schemaFields\">schemaFields()</a></dt>\n<dd><p>Collapse inheritance (via &quot;base&quot;) putting all the fields in one object.</p>\n</dd>\n</dl>\n<p><a name=\"encodeName\"></a></p>\n<h2 id=\"encodenamename-littleendian-⇒-codestringuint64code\">encodeName(name, [littleEndian]) ⇒ <code>string.&#x3C;uint64></code></h2>\n<p>Encode a name (a base32 string) to a number.</p>\n<p>  For performance reasons, the blockchain uses the numerical encoding of strings\nfor very common types like account names.</p>\n<p><strong>Kind</strong>: global function\n<strong>Returns</strong>: <code>string.&#x3C;uint64></code> - - compressed string (from name arg).  A string is\nalways used because a number could exceed JavaScript's 52 bit limit.\n<strong>See</strong>: types.hpp string_to_name</p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td><code>string</code></td>\n<td></td>\n<td>A string to encode, up to 12 characters long.</td>\n</tr>\n<tr>\n<td>[littleEndian]</td>\n<td><code>string</code></td>\n<td><code>true</code></td>\n<td>Little or Bigendian encoding</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"decodeName\"></a></p>\n<h2 id=\"decodenamevalue-littleendian-⇒-codestringcode\">decodeName(value, [littleEndian]) ⇒ <code>string</code></h2>\n<p><strong>Kind</strong>: global function</p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td><code>Long</code> | <code>String</code> | <code>number</code></td>\n<td></td>\n<td>uint64</td>\n</tr>\n<tr>\n<td>[littleEndian]</td>\n<td><code>string</code></td>\n<td><code>true</code></td>\n<td>Little or Bigendian encoding</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"DecimalString\"></a></p>\n<h2 id=\"decimalstring-⇒-codestringcode\">DecimalString() ⇒ <code>string</code></h2>\n<p>Normalize and validate decimal string (potentially large values).  Should\navoid internationalization issues if possible but will be safe and\nthrow an error for an invalid number.</p>\n<p>  Normalization removes extra zeros or decimal.</p>\n<p><strong>Kind</strong>: global function\n<strong>Returns</strong>: <code>string</code> - value\n<a name=\"DecimalPad\"></a></p>\n<h2 id=\"decimalpadnum-precision-⇒-codestringcode\">DecimalPad(num, [precision]) ⇒ <code>string</code></h2>\n<p>Ensure a fixed number of decimal places.  Safe for large numbers.</p>\n<p><strong>Kind</strong>: global function\n<strong>Returns</strong>: <code>string</code> - decimal part is added and zero padded to match precision\n<strong>See</strong>: ./format.test.js</p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>num</td>\n<td><code>number</code> | <code>string</code> | <code>object.toString</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>[precision]</td>\n<td><code>number</code></td>\n<td><code></code></td>\n<td>number of decimal places.  Null skips     padding suffix but still applies number format normalization.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">DecimalPad</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'10.200'</span></code></pre></div>\n<p><a name=\"DecimalImply\"></a></p>\n<h2 id=\"decimalimply\">DecimalImply()</h2>\n<p>Ensures proper trailing zeros then removes decimal place.</p>\n<p><strong>Kind</strong>: global function\n<a name=\"DecimalUnimply\"></a></p>\n<h2 id=\"decimalunimplyvalue-precision-⇒-codenumbercode\">DecimalUnimply(value, precision) ⇒ <code>number</code></h2>\n<p>Put the decimal place back in its position and return the normalized number\nstring (with any unnecessary zeros or an unnecessary decimal removed).</p>\n<p><strong>Kind</strong>: global function\n<strong>Returns</strong>: <code>number</code> - 1.0000</p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td><code>string</code> | <code>number</code> | <code>value.toString</code></td>\n<td>10000</td>\n</tr>\n<tr>\n<td>precision</td>\n<td><code>number</code></td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"parseAsset\"></a></p>\n<h2 id=\"parseasset-⇒-codeobjectcode\">parseAsset() ⇒ <code>object</code></h2>\n<p>Attempts to parse all forms of the asset strings (symbol, asset, or extended\nversions).  If the provided string contains any additional or appears to have\ninvalid information an error is thrown.</p>\n<p><strong>Kind</strong>: global function\n<strong>Returns</strong>: <code>object</code> - {amount, precision, symbol, contract}\n<strong>Throws</strong>:</p>\n<ul>\n<li>AssertionError</li>\n</ul>\n<p><a name=\"Testnet\"></a></p>\n<h2 id=\"testnet\"><del>Testnet()</del></h2>\n<p><strong><em>Deprecated</em></strong></p>\n<p><strong>Kind</strong>: global function\n<a name=\"Localnet\"></a></p>\n<h2 id=\"localnet\"><del>Localnet()</del></h2>\n<p><strong><em>Deprecated</em></strong></p>\n<p><strong>Kind</strong>: global function\n<a name=\"safeConfig\"></a></p>\n<h2 id=\"safeconfig\">safeConfig()</h2>\n<p>Set each property as read-only, read-write, no-access.  This is shallow\nin that it applies only to the root object and does not limit access\nto properties under a given object.</p>\n<p><strong>Kind</strong>: global function\n<a name=\"mergeWriteFunctions\"></a></p>\n<h2 id=\"mergewritefunctionseosapi-⇒-codeobjectcode\">mergeWriteFunctions(EosApi) ⇒ <code>object</code></h2>\n<p>Merge in write functions (operations).  Tested against existing methods for\nname conflicts.</p>\n<p><strong>Kind</strong>: global function\n<strong>Returns</strong>: <code>object</code> - - read and write method calls (create and sign transactions)\n<strong>Throw</strong>: <code>TypeError</code> if a funciton name conflicts</p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>config.network</td>\n<td><code>object</code></td>\n<td>read-only api calls</td>\n</tr>\n<tr>\n<td>EosApi</td>\n<td><code>object</code></td>\n<td>api[EosApi] read-only api calls</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"defaultSignProvider\"></a></p>\n<h2 id=\"defaultsignprovider\">defaultSignProvider()</h2>\n<p>The default sign provider is designed to interact with the available public\nkeys (maybe just one), the transaction, and the blockchain to figure out\nthe minimum set of signing keys.</p>\n<p>  If only one key is available, the blockchain API calls are skipped and that\nkey is used to sign the transaction.</p>\n<p><strong>Kind</strong>: global function\n<a name=\"Name\"></a></p>\n<h2 id=\"name\">Name()</h2>\n<p>Name eos::types native.hpp</p>\n<p><strong>Kind</strong>: global function\n<a name=\"variant\"></a></p>\n<h2 id=\"variantvariantarray\">variant(...variantArray)</h2>\n<p>A variant is like having a version of an object.  A varint comes\nfirst and identifies which type of object this is.</p>\n<p><strong>Kind</strong>: global function</p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>...variantArray</td>\n<td><code>Array</code></td>\n<td>array of types</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"Symbol\"></a></p>\n<h2 id=\"symbol\">Symbol()</h2>\n<p>Internal: precision, symbol\nExternal: symbol</p>\n<p><strong>Kind</strong>: global function\n<strong>Example</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'SYS'</span></code></pre></div>\n<p><a name=\"SymbolCode\"></a></p>\n<h2 id=\"symbolcode\">SymbolCode()</h2>\n<p>Symbol type without the precision</p>\n<p><strong>Kind</strong>: global function\n<a name=\"ExtendedSymbol\"></a></p>\n<h2 id=\"extendedsymbol\">ExtendedSymbol()</h2>\n<p>Internal: precision, symbol, contract\nExternal: symbol, contract</p>\n<p><strong>Kind</strong>: global function\n<strong>Example</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'SYS@contract'</span></code></pre></div>\n<p><a name=\"Asset\"></a></p>\n<h2 id=\"asset\">Asset()</h2>\n<p>Internal: amount, precision, symbol, contract</p>\n<p><strong>Kind</strong>: global function\n<strong>Example</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'1.0000 SYS'</span></code></pre></div>\n<p><a name=\"ExtendedAsset\"></a></p>\n<h2 id=\"extendedasset\">ExtendedAsset()</h2>\n<p><strong>Kind</strong>: global function\n<strong>Example</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'1.0000 SYS@contract'</span></code></pre></div>\n<p><a name=\"authority.fromObject\"></a></p>\n<h2 id=\"authorityfromobject\">authority.fromObject()</h2>\n<p>shorthand <code class=\"language-text\">EOS6MRyAj..</code></p>\n<p><strong>Kind</strong>: global function\n<a name=\"actionDataOverride\"></a></p>\n<h2 id=\"actiondataoverride\">actionDataOverride()</h2>\n<p>Nested serialized structure.  Nested struct may be in HEX or object format.</p>\n<p><strong>Kind</strong>: global function\n<a name=\"schemaFields\"></a></p>\n<h2 id=\"schemafields\">schemaFields()</h2>\n<p>Collapse inheritance (via \"base\") putting all the fields in one object.</p>\n<p><strong>Kind</strong>: global function</p>","tableOfContents":"<ul>\n<li><a href=\"/eosjs/v16.0/reference/#functions\">Functions</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#encodenamename-littleendian-%E2%87%92-codestringuint64code\">encodeName(name, littleEndian) ⇒ &#x3C;code>string.&#x3C;uint64>&#x3C;/code></a></li>\n<li><a href=\"/eosjs/v16.0/reference/#decodenamevalue-littleendian-%E2%87%92-codestringcode\">decodeName(value, littleEndian) ⇒ &#x3C;code>string&#x3C;/code></a></li>\n<li><a href=\"/eosjs/v16.0/reference/#decimalstring-%E2%87%92-codestringcode\">DecimalString() ⇒ &#x3C;code>string&#x3C;/code></a></li>\n<li><a href=\"/eosjs/v16.0/reference/#decimalpadnum-precision-%E2%87%92-codestringcode\">DecimalPad(num, precision) ⇒ &#x3C;code>string&#x3C;/code></a></li>\n<li><a href=\"/eosjs/v16.0/reference/#decimalimply\">DecimalImply()</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#decimalunimplyvalue-precision-%E2%87%92-codenumbercode\">DecimalUnimply(value, precision) ⇒ &#x3C;code>number&#x3C;/code></a></li>\n<li><a href=\"/eosjs/v16.0/reference/#parseasset-%E2%87%92-codeobjectcode\">parseAsset() ⇒ &#x3C;code>object&#x3C;/code></a></li>\n<li><a href=\"/eosjs/v16.0/reference/#testnet\">Testnet()</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#localnet\">Localnet()</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#safeconfig\">safeConfig()</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#mergewritefunctionseosapi-%E2%87%92-codeobjectcode\">mergeWriteFunctions(EosApi) ⇒ &#x3C;code>object&#x3C;/code></a></li>\n<li><a href=\"/eosjs/v16.0/reference/#defaultsignprovider\">defaultSignProvider()</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#name\">Name()</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#variantvariantarray\">variant(...variantArray)</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#symbol\">Symbol()</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#symbolcode\">SymbolCode()</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#extendedsymbol\">ExtendedSymbol()</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#asset\">Asset()</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#extendedasset\">ExtendedAsset()</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#authorityfromobject\">authority.fromObject()</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#actiondataoverride\">actionDataOverride()</a></li>\n<li><a href=\"/eosjs/v16.0/reference/#schemafields\">schemaFields()</a></li>\n</ul>","frontmatter":{"edit_link":null,"request_changes_link":null},"fields":{"articleTitle":"reference","contentTitle":"Reference","headTagTitle":"reference","internalSummary":"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/v16.0/SUMMARY.json","isCollection":false,"isRoot":true,"isTagged":true,"organization":"EOSIO","originalKey":"/","pathData":"{\"tagged\":true,\"parentPath\":\"v16.0\",\"collectionPath\":\"/\",\"rootDirPath\":\"v16.0\",\"filename\":\"reference.md\"}","repository":"eosjs","showSearch":true,"slug":"/v16.0/reference","tagsList":"[{\"beta\":null,\"build\":null,\"deprecated\":false,\"latest\":true,\"rc\":0,\"tag\":\"20.0.0\",\"tag_reduced\":\"20.0\",\"tag_reduced_friendly\":\"v20.0\",\"tag_sanitized\":\"20.0.0\",\"summaryPath\":\"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/latest/SUMMARY.json\",\"importedSummary\":\"N/A\",\"version\":\"latest\"},{\"beta\":null,\"build\":null,\"deprecated\":false,\"latest\":false,\"rc\":0,\"tag\":\"v16.0.9\",\"tag_reduced\":\"16.0\",\"tag_reduced_friendly\":\"v16.0\",\"tag_sanitized\":\"16.0.9\",\"summaryPath\":\"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/v16.0/SUMMARY.json\",\"importedSummary\":\"N/A\",\"version\":\"v16.0\"},{\"beta\":null,\"build\":null,\"deprecated\":false,\"latest\":false,\"rc\":0,\"tag\":\"v15.0.6\",\"tag_reduced\":\"15.0\",\"tag_reduced_friendly\":\"v15.0\",\"tag_sanitized\":\"15.0.6\",\"summaryPath\":\"/usr/local/lib/python3.6/dist-packages/thorka-0.1-py3.6.egg/src/lib/gatsby/data/v15.0/SUMMARY.json\",\"importedSummary\":\"N/A\",\"version\":\"v15.0\"}]","latestDDVersion":"latest","importedSummary":"N/A","hasPrimaryNavigation":false,"primaryNavData":"[{\"text\":\"NONE\",\"path\":\"EMPTY\"}]","currentVersion":"v16.0","currentDDVersion":"16.0","summaryJson":"{\"array\":[{\"title\":\"Format\",\"link\":\"format.md\"},{\"title\":\"Prior versions\",\"link\":\"prior_versions.md\"},{\"title\":\"Reference\",\"link\":\"reference.md\",\"sub\":[]}],\"title\":[]}"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/v16.0/reference"}}}